import discord
import datetime
import asyncio
import os
import json
import random
import math
from pytube import YouTube as YT
from discord import FFmpegPCMAudio
from discord.ext import commands
from discord.utils import get
from config import API_TOKEN
from typing import Union
from collections import deque

intents = discord.Intents.default()
intents.members = True
intents.message_content = True


Version = "3.0.0-R1"
bot = commands.Bot(command_prefix='$', intents=intents, help_command=None)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')
    activity = discord.Activity(name=f'Version {Version}', type=discord.ActivityType.watching, details="Watching", state="Discord")
    await bot.change_presence(activity=activity)

@bot.command()
@commands.has_permissions(administrator=True)
async def settings(ctx):
    with open("commands.json", "r") as f:
        commands = json.load(f)

    output_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    emojis = ["üá¶","üáß","üá®","üá©","üá™","üá´","üá¨","üá≠","üáÆ","üáØ","üá∞","üá±","üá≤","üá≥","üá¥","üáµ","üá∂","üá∑","üá∏","üáπ"]
    reactions = []

    for i, (command, admin_only) in enumerate(commands.items(), start=1):
        output_message += f"{emojis[i-1]} {command} - {'–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' if not admin_only else '–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}\n"
    output_message += "\n–ù–∞–∂–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é —Å –±—É–∫–≤–æ–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å."
    message = await ctx.send(output_message)

    for i in range(len(commands)):
        reaction = emojis[i]
        await message.add_reaction(reaction)
        reactions.append(reaction)

    def check(reaction, user):
        return (
            user.guild_permissions.administrator
            and reaction.message == message
            and str(reaction.emoji) in emojis
        )

    try:
        reaction, user = await bot.wait_for("reaction_add", check=check, timeout=30)
        command_index = emojis.index(str(reaction.emoji))
        command_name = list(commands.keys())[command_index]
        commands[command_name] = not commands[command_name]

        with open("commands.json", "w") as f:
            json.dump(commands, f, indent=4)

        await message.edit(content="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except asyncio.TimeoutError:
        for reaction in reactions:
            await message.clear_reaction(reaction)      

@settings.error
async def settings_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

@bot.command()
async def dmbomb(ctx, times: int, user_id: int, *, message: str):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["dmbomb"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if times > 100:
        await ctx.send("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π - 100.")
        return
    user = bot.get_user(user_id)
    if user is None:
        print(f"User with ID {user_id} not found.")
        return
    for i in range(times):
        try:
            await user.send(message)
            print(f'Dmbombing {user} with "{message}" message')
        except discord.Forbidden:
            print(f"User {user.name} has blocked the bot.")
            await ctx.guild.ban(user, reason="User has blocked the bot.")
    
    await ctx.send(f'{user} –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö {times} —Ä–∞–∑.')

@bot.command()
async def chbomb(ctx, times: int, user_id: int):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["chbomb"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if times > 100:
        await ctx.send("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π - 100.")
        return
    user = bot.get_user(user_id)
    if user is None:
        print(f"User with ID {user_id} not found.")
        return

    channel = await ctx.guild.create_text_channel(name=f"chbomb-{user_id}")
    await channel.set_permissions(user, read_messages=True, send_messages=True)

    for i in range(times):
        print(f'Chbombing {user} {i+1}/{times} times')
        await channel.send(f"–î—É—Ä–∞—à–∫–∞ –Ω–∞ {user.mention}, —Ç–µ–±—è —á–ø–æ–∫–Ω—É–ª–∏ {i+1}/{times} —Ä–∞–∑")
    await ctx.send(f"{user} –±—ã–ª —Ä–∞–∑–±–æ–º–±–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {times} —Ä–∞–∑.")
    await asyncio.sleep(180)
    await channel.delete()


@bot.command()
async def spmove(ctx, num_moves: int, user_id: int, channel: discord.VoiceChannel):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["spmove"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if num_moves > 100:
        await ctx.send("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π - 100.")
        return
    user = ctx.guild.get_member(user_id)
    if user is None:
        print("User not found.")
        return
    original_channel = user.voice.channel
    for i in range(num_moves):
        await user.move_to(channel)
        await discord.utils.sleep_until(datetime.datetime.now() + datetime.timedelta(seconds=1))
        await user.move_to(original_channel)
        await discord.utils.sleep_until(datetime.datetime.now() + datetime.timedelta(seconds=1))
    print(f"Moved {user.name} back and forth between {channel.name} and {original_channel.name} {num_moves} times.")
    await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –º–µ–∂–¥—É {channel.name} –∏ {original_channel.name} {num_moves} —Ä–∞–∑.")


@bot.command()
async def purge(ctx, limit: int):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["purge"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if limit > 100:
        await ctx.send("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π - 100.")
        return
    deleted = await ctx.channel.purge(limit=limit+1)
    await ctx.send(f"{len(deleted) - 1} —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

@bot.command()
async def id(ctx, user: Union[discord.Member, int]):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["id"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("This command is not available for all users.")
        return
    if isinstance(user, int):
        try:
            user = await bot.fetch_user(user)
        except discord.NotFound:
            return await ctx.send('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    elif isinstance(user, discord.Member):
        pass
    else:
        return await ctx.send('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥.')
    
    await ctx.send(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name} - {user.id}")

# MUSIC FEATURES

if not os.path.exists("./media"):
        os.mkdir("./media")

MUSIC_LIBRARY_PATH = './media/'
audio_files = [file for file in os.listdir('./media') if file.endswith(('.mp3'))]

async def change_rpc(s: str):
    act = discord.Activity(name=s, type=discord.ActivityType.watching, details="Watching", state="Discord")
    await bot.change_presence(activity=act)

song_dict = {}
for song_title in audio_files:
    title = os.path.splitext(song_title)[0]
    song_dict[title] = os.path.join(MUSIC_LIBRARY_PATH, song_title)

song_queue = deque()
SONGS_PER_PAGE = 15

async def show_list(ctx, page: int, s_list, header: str):
    num_pages = math.ceil(len(s_list) / SONGS_PER_PAGE)
    start_index = (page - 1) * SONGS_PER_PAGE
    end_index = start_index + SONGS_PER_PAGE

    embed = discord.Embed(title=header, color=0x00ff00)
    for i, song in enumerate(s_list[start_index:end_index], start=start_index):
        embed.add_field(name=f'{i+1}. {os.path.splitext(song)[0]}', value='\u200b', inline=False)

    embed.set_footer(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{num_pages}. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è.')
    message = await ctx.send(embed=embed)

    if num_pages > 1:
        await message.add_reaction('‚¨ÖÔ∏è')
        await message.add_reaction('‚û°Ô∏è')

        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ['‚¨ÖÔ∏è', '‚û°Ô∏è']

        current_page = page
        while True:
            try:
                reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
            except asyncio.TimeoutError:
                await message.clear_reactions()
                break
            else:
                if str(reaction.emoji) == '‚¨ÖÔ∏è':
                    current_page = max(1, current_page - 1)
                elif str(reaction.emoji) == '‚û°Ô∏è':
                    current_page = min(num_pages, current_page + 1)

                await message.remove_reaction(reaction, user)

                if current_page != page:
                    page = current_page
                    start_index = (page - 1) * SONGS_PER_PAGE
                    end_index = start_index + SONGS_PER_PAGE

                    embed.clear_fields()
                    for i, song in enumerate(s_list[start_index:end_index], start=start_index):
                        embed.add_field(name=f'{i+1}. {os.path.splitext(song)[0]}', value='\u200b', inline=False)

                    embed.set_footer(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{num_pages}. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è.')
                    await message.edit(embed=embed)

@bot.command()
async def songs(ctx, page: int = 1):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["songs"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if not audio_files:
        await ctx.send("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Å–µ–Ω")
    else:
        await show_list(ctx, page, audio_files, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Å–Ω–∏:')

async def songs_play(ctx, voice_client):
    while len(song_queue) > 0:
        song_title = song_queue.popleft()
        song_path = song_dict.get(song_title)
        audio_source = discord.FFmpegPCMAudio(song_path)
        voice_client.play(audio_source)
        await change_rpc(song_title)
        while voice_client.is_playing():
            await asyncio.sleep(1)
    await change_rpc(f'Version {Version}')
    await voice_client.disconnect()

@bot.command()
async def play(ctx, *, song_title: str):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["play"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    voice_client = ctx.voice_client
    if not voice_client:
        voice_channel = ctx.author.voice.channel
        voice_client = await voice_channel.connect()
        
    song_path = song_dict.get(song_title)
    if song_path:
        song_queue.append(song_title)
        if not voice_client.is_playing():
            await ctx.send(f'–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–µ—Å–Ω—è: {song_title}')
            await songs_play(ctx, voice_client)
        else:
            await ctx.send(f'–ü–µ—Å–Ω—è {song_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.')
    else:
        await ctx.send(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é: {song_title}')
        
@bot.command()
async def skip(ctx):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["skip"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    voice_client = ctx.voice_client
    if voice_client.is_playing():
        voice_client.stop()
        await ctx.send(f'–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.')
    else:
        await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è.')

@bot.command()
async def queue(ctx, page: int = 1):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["queue"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if len(song_queue) == 0:
        await ctx.send('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.')
    else:
        queue = [*song_queue]
        await show_list(ctx, page, queue, '–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:')

@bot.command()
async def stop(ctx):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["stop"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    voice_client = ctx.voice_client
    if voice_client:
        if voice_client.is_playing():
            await ctx.send('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏.')
            voice_client.stop()
        song_queue.clear()
        await change_rpc(f'Version {Version}')
        await voice_client.disconnect()
    else:
        await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è.')

@bot.command()
async def songs_upload(ctx, *, file_name: str):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["songs_upload"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    artist_title = file_name.strip('"')

    if len(file_name) > 100:
        await ctx.send('–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.')
        return

    if not ctx.message.attachments:
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª MP3 –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return

    attachment = ctx.message.attachments[0]

    if not attachment.filename.endswith(".mp3"):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª MP3 –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return

    if not os.path.exists("./media"):
        os.mkdir("./media")

    new_file_name = f"{artist_title}.mp3"
    file_path = f"./media/{new_file_name}"
    await attachment.save(file_path)

    song_dict[artist_title] = file_path
    await ctx.send(f"–§–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ '{artist_title}'.")

@bot.command()
async def download(ctx, url: str, title: str = ""):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["download"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    global song_dict
    try:
        video=YT(url, use_oauth=True, allow_oauth_cache=True)
        filtered=video.streams.filter(only_audio=True)
        if video.length > 600 or video.length < 1:
            await ctx.send(f'–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–ª–∏–Ω–Ω–µ–µ 10 –º–∏–Ω—É—Ç. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ - {video.length//60}/10 –º–∏–Ω—É—Ç.')
            return
        await ctx.send('–ó–∞–≥—Ä—É–∑–∫–∞...')
        out_file = filtered[0].download('./media/')
        if os.path.isfile(out_file):
            base, ext = os.path.splitext(out_file)
            if title == "":
                title = video.title
            new_file = f'./media/{title}.mp3'
            os.rename(out_file, new_file)
            song_dict[title] = new_file
            await ctx.send(f'–§–∞–π–ª {title} –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.')
        else:
            await ctx.send(f'–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.')
    except Exception as e:
        print(f"Error: {e}")

def load_playlists(playlist_name=None):
    if os.path.exists("playlists.json"):
        with open("playlists.json", "r") as f:
            playlists = json.load(f)
            if playlist_name:
                return playlists.get(playlist_name)
            else:
                return playlists
    else:
        playlists = {}
        with open("playlists.json", "w") as f:
            json.dump(playlists, f)
        return {}

def load_names():
    names_list = []
    if os.path.exists("playlists.json"):
        with open("playlists.json", "r") as f:
            playlists = json.load(f)
            for key in playlists.keys():
                names_list.append(key)
            return names_list
    else:
        playlists = {}
        with open("playlists.json", "w") as f:
            json.dump(playlists, f)
        return {}

def save_playlists(playlists):
    with open("playlists.json", "w") as f:
        json.dump(playlists, f)

@bot.command()
async def playlists(ctx, page: int = 1):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["playlists"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if not playlists:
        await ctx.send("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")
    else:
        names = load_names()
        await show_list(ctx, page, names, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã:')

@bot.command()
async def create_playlist(ctx, name, *songs):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["create_playlist"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        playlists[name] = songs
        save_playlists(playlists)
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω.")

@bot.command()
async def play_playlist(ctx, name, loop=False):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["play_playlist"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name not in playlists:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        await ctx.send("–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç: " + name)
        voice_channel = ctx.author.voice.channel
        voice_client = await voice_channel.connect()
        cur_playlist = playlists[name]
        while True:
            for song in cur_playlist:
                source = FFmpegPCMAudio(f"./media/{song}.mp3")
                voice_client.play(source)
                await change_rpc(song)
                while voice_client.is_playing():
                    await asyncio.sleep(1)
            if not loop:
                break
        await change_rpc(f'Version {Version}')
        await voice_client.disconnect()
        
@bot.command()
async def delete_playlist(ctx, name):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["delete_playlist"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        del playlists[name]
        save_playlists(playlists)
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
@bot.command()
async def shuffle_playlist(ctx, name, loop=False):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["shuffle_playlist"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        voice_channel = ctx.author.voice.channel
        voice_client = await voice_channel.connect()
        cur_playlist = playlists[name]
        await ctx.send("–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: " + name)
        while True:
            if loop:
                random.shuffle(cur_playlist)
            for song in cur_playlist:
                source = FFmpegPCMAudio(f"./media/{song}.mp3")
                voice_client.play(source)
                await change_rpc(song)
                while voice_client.is_playing():
                    await asyncio.sleep(1)
            if not loop:
                break
        await change_rpc(f'Version {Version}')
        await voice_client.disconnect()
    else:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@bot.command()
async def songs_playlist(ctx, name, page: int = 1):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["songs_playlist"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        await show_list(ctx, page, playlists[name], f'–ü–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ {name}:')
    else:
        await ctx.send(f"–ü–ª–µ–π–ª–∏—Å—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.command()
async def songs_delete(ctx, name, *args):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["songs_delete"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        deleted_songs = []
        for song in args:
            if song in playlists[name]:
                playlists[name].remove(song)
                deleted_songs.append(song)
        if deleted_songs:
            save_playlists(playlists)
            await ctx.send(f"–ü–µ—Å–Ω–∏ {', '.join(deleted_songs)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ {name}.")
        else:
            await ctx.send(f"–ù–∏ –æ–¥–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ {name}.")
    else:
        await ctx.send(f"–ü–ª–µ–π–ª–∏—Å—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.command()
async def songs_add(ctx, name, *args):
    with open("commands.json", "rb") as f:
        commands = json.load(f)
    if not commands["songs_add"] and not ctx.author.guild_permissions.administrator:
        await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    playlists = load_playlists()
    if name in playlists:
        added_songs = []
        for song in args:
            if song not in playlists[name]:
                playlists[name].append(song)
                added_songs.append(song)
        if added_songs:
            save_playlists(playlists)
            await ctx.send(f"–ü–µ—Å–Ω–∏ {', '.join(added_songs)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç {name}.")
        else:
            await ctx.send(f"–ü–ª–µ–π–ª–∏—Å—Ç {name} –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await ctx.send(f"–ü–ª–µ–π–ª–∏—Å—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.command()
async def help(ctx):
    embed = discord.Embed(title="–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", color=0x00ff00)
    embed.add_field(name="$settings", value="–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞.",inline=False)
    embed.add_field(name="$dmbomb [times] [user_id] [message]", value="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.", inline=False)
    embed.add_field(name="$chbomb [times] [user_id]", value="–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —Ç–µ–≥–Ω—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.", inline=False)
    embed.add_field(name="$spmove [num_moves] [user_id] [channel]", value="–°—É–ø–µ—Ä-–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º.", inline=False)
    embed.add_field(name="$purge [limit]", value="–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.", inline=False)
    embed.add_field(name="$id [@user] or [user id]", value="–ü—Ä–∏ —É–º–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ ID, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ ID.")
    embed.add_field(name="–î–õ–Ø –†–ê–ë–û–¢–´ –ú–£–ó–´–ö–ò –ù–£–ñ–ù–û –£–°–¢–ê–ù–û–í–ò–¢–¨ FFmpeg.", value="", inline=False)
    embed.add_field(name="$songs", value="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Å–µ–Ω.", inline=False)
    embed.add_field(name="$play [song title]", value="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é.", inline=False)
    embed.add_field(name="$skip", value="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é.", inline=False)
    embed.add_field(name="$queue", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–µ—Å–µ–Ω.", inline=False)
    embed.add_field(name="$stop", value="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É.", inline=False)
    embed.add_field(name='$songs_upload "song title without extension"', value='–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å MP3 —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –º—É–∑—ã–∫–æ–π.(**NOTE: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ê–í–´–ß–ö–ò, –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï**) (**NOTE 2: –ö —Å–æ–æ–±—â–µ–Ω–∏—é –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª**)',inline=False)
    embed.add_field(name='$download YOUTUBE URL [–ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: "song title" (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –∫–∞–≤—ã—á–∫–∏)]', value="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω—é —Å Youtube.",inline=False)
    embed.add_field(name="$playlists", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã", inline=False)
    embed.add_field(name='$create_playlist "playlist title" "full song title 1" "full song title 2"...', value="–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç.(**NOTE: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ê–í–´–ß–ö–ò, –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï**) (**NOTE 2: –ù–ê–ó–í–ê–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê –î–û–õ–ñ–ù–û –°–û–°–¢–û–Ø–¢–¨ –ò–ó 1 —Å–ª–æ–≤–∞.**)", inline=False)
    embed.add_field(name="$play_playlist [playlist title] [–ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: True (—Ç–æ–≥–¥–∞ –ø–ª–µ–π–ª–∏—Å—Ç –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞)]", value="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç.",inline=False)
    embed.add_field(name="$delete_playlist [playlist title]", value="–£–¥–∞–ª—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç.",inline=False)
    embed.add_field(name="$shuffle_playlist [playlist title] [–ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: True (—Ç–æ–≥–¥–∞ –ø–ª–µ–π–ª–∏—Å—Ç –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞)]", value="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç.",inline=False)
    embed.add_field(name="$songs_playlist [playlist title]", value="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.", inline=False)
    embed.add_field(name='$songs_delete "playlist title" "song" "song2"', value="–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–µ—Å–Ω—é –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞. (**NOTE: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ê–í–´–ß–ö–ò, –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï**)", inline=False)
    embed.add_field(name='$songs_add "playlist title" "song" "song2"', value="–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–µ—Å–Ω—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç. (**NOTE: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ê–í–´–ß–ö–ò, –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï**)", inline=False)
    embed.add_field(name=" ", value= " ", inline=False)
    embed.add_field(name="–ê–≤—Ç–æ—Ä –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:", value="**Jeyen**", inline=False)
    embed.add_field(name="VERSION:", value= f'{Version}', inline=False)
    await ctx.send(embed=embed)

bot.run(API_TOKEN)
